skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
q()
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
swirl()
q()
swirl()
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
swirl()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
my_data
q()
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
skip()
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
skip()
identical(my_matrix, my_matrix2)
skip()
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- C("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
! 5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
<- sample(10)
ints <- sample(10)
ints
ints > 5
which(ints, )
skip
skip()
any(ints < 0)
all(ints > 0)
gc()
?gc
library"swirl"
library"swirl")
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flag_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
head(flags)
dim(flags)
0
q()
library("swirl")
swirl()
Sys.setlocale("en_US.UTF-8")
Sys.getlocale
Sys.getlocale()
Sys.getlocale("LC_TIME")
library9"lubridate"
library("lubridat")
library("lubridate")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month()
month(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_month <- now()
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
classa(my_date)
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("//192012")
ymd("//1920/1/2")
ymd("1920/1/2")
dtl
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
skip()
this_moment
skip()
nyc
depart <- nyc + days(2)
depart
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
deaprt
depart
arrive <- depart + hours(15) + minutes(50)
with_tz()
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- with_tz(mdy("June 17, 2008"), tzone="Singapore")
last_time <- mdy("June 17, 2008", tzone="Singapore")
last_time <- mdy("June 17, 2008", tz="Singapore")
last_tine
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
library("swirl")
swirl()
Sys.getlocale()
Sys.getlocale("LC_TIME")
library("lubridate")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_date
this_day
year(this_day)
wday(this_day)
wday(this_day, label=T)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now()
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours=17, minutes=34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone="Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
q()
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
install.packages("lattice")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
?postscript
?dev.copy
?dev.copy2pdf
?postscript
require(graphics)
postscript("foo.ps", family = "NimbusSan")
par(pty = "s")
plot(c(-1,16), c(-1,16), type = "n", xlab = "", ylab = "",
xaxs = "i", yaxs = "i")
title(paste("Centred chars in encoding", encoding))
par(pty = "s")
plot(c(-1,16), c(-1,16), type = "n", xlab = "", ylab = "",
xaxs = "i", yaxs = "i")
?png
png(file = "myplot.png", bg = "transparent")
plot(1:10)
rect(1, 5, 3, 7, col = "white")
dev.copy2pdf(file="myplot.pdf" , out.type="pdf")
dev.copy2pdf(file="myplot.pdf")
##  http://www.ats.ucla.edu/stat/r/faq/barplotplus.htm
## If you so choose to run this program, I want to let you know that
## there is some housekeeping code which will clean up the environment
## of any variables after the program has completed execution.
## load the packages
library(data.table)
library(ggplot2)
## read the data file
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## we need only Baltimore City, MD  and Los Angeles County, CA here.
## Most of the motor vehicle vehicles are classified under type "Onroad".
## we also need to get the motor vehicles classified in "Nonroad" type with "Recreational" in Short.Name
SCCMotorVeh = SCC[((grepl("Recreational", SCC$Short.Name, ignore.case=TRUE) &
SCC$Data.Category == "Nonroad") | (SCC$Data.Category == "Onroad")), ]
NEIFilter <- NEI[NEI$SCC %in% SCCMotorVeh$SCC & (NEI$fips == "24510" | NEI$fips == "06037"),]
## convert the year to a factor
NEIFilter <- transform(NEIFilter, year = factor(year, levels=c('1999','2002','2005','2008')))
## convert data frame to data table
NEIDT <- data.table(NEIFilter)
## calculate the emission summary grouped by fips and year.
NEISUMRY <- NEIDT[, list(totalEmission=sum(Emissions)), by=list(fips,year)]
## rename the values for fips to descriptive names.
NEISUMRY$fips[NEISUMRY$fips == "24510"] <- "Baltimore City, Maryland"
NEISUMRY$fips[NEISUMRY$fips == "06037"] <- "Los Angeles County, California"
## create a png file
png("plot6.png", width=480, bg="white")
## create a plot
ggplot(data=NEISUMRY,aes(x=year, y=round(totalEmission))) +
geom_bar(aes(fill=year), stat="identity")  +
facet_wrap(~fips) +
ylab(expression(PM[2.5] * " tons")) +
xlab("Year") +
ggtitle("Motor Vehicle Emission in Baltimore City and Los Angeles County") +
geom_text(size=5, aes(label =round(totalEmission),"%",sep="",x=year, y=round(totalEmission)+150)) +
guides(fill = FALSE)
## Close the PNG graphics device
dev.off()
## Little bit of housekeeping here.
## This will remove the variables created by this program from the environment.
remove(NEI)
remove(SCC)
remove(SCCMotorVeh)
remove(NEIDT)
remove(NEIFilter)
remove(NEISUMRY)
## Unload packages
detach("package:data.table", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
suppressWarnings(library("plyr", lib.loc="~/R/win-library/3.1"))
suppressWarnings(library("plyr", lib.loc="~/R/win-library/3.1"))
suppressWarnings(library("lubridate", lib.loc="~/R/win-library/3.1"))
suppressWarnings(library("stringr", lib.loc="~/R/win-library/3.1"))
suppressWarnings(library("ggplot2", lib.loc="~/R/win-library/3.1"))
suppressWarnings(library("qcc", lib.loc="~/R/win-library/3.1"))
suppressWarnings(library("gridExtra", lib.loc="~/R/win-library/3.1"))
suppressWarnings(library("scales", lib.loc="~/R/win-library/3.1"))
suppressPackageStartupMessages(library(lubridate))
suppressPackageStartupMessages(library(plyr))
suppressPackageStartupMessages(library(qcc))
suppressWarnings(suppressPackageStartupMessages(library(gridExtra)))
install.packages(c("formatR", "highr", "jsonlite", "lattice", "manipulate", "mime"))
install.packages(c("lattice", "MASS", "mgcv"), lib="D:/Programs/R-3.1.2/library")
install.packages(c("BH", "chron", "devtools", "dplyr", "evaluate", "Formula", "highr", "Hmisc", "httr", "jsonlite", "knitr", "manipulate", "markdown", "plyr", "R.utils", "Rcpp", "RCurl", "rmarkdown", "RMySQL", "roxygen2", "rstudioapi", "scales", "stringi", "stringr", "testthat", "XML"))
install.packages(c("boot", "class", "cluster", "foreign", "KernSmooth", "MASS", "Matrix", "nlme", "nnet", "rpart", "spatial", "survival"), lib="D:/Programs/R-3.1.2/library")
install.packages("shiny")
library("shiny", lib.loc="~/R/win-library/3.1")
install.packages(c("bit64", "curl", "googleVis", "R6"))
require(rCharts)
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
library("shinyapps", lib.loc="~/R/win-library/3.1")
load(rChart)
load(rCharts)
require(rCharts)
require(devtools)
install_github('rCharts','ramnathv')
library(rCharts)
require(airquality)
(airquality)
dTable(airquality, sPagination = 'Full_numbers')
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE)
View(d)
unload(pkg="rCharts")
library("rCharts", lib.loc="~/R/win-library/3.1")
detach("package:rCharts", unload=TRUE)
dTable(airquality, sPagination = 'Full_numbers')
library("rCharts", lib.loc="~/R/win-library/3.1")
dTable(airquality, sPagination = 'Full_numbers')
setwd("D:/Coursera/RWorkingDir/DevelopingDataProducts/CourseProject")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("D:/Coursera/RWorkingDir/DevelopingDataProducts/CourseProject-A")
activityDT <- read.table("data/activity.csv", sep=",", header=T)
activityDTNew <- subset(activityDT, activityDT$step != "NA")
## wday gives numeric weekday (0-Sunday ... 6-Saturday)
## so now we have new column with numeric values representing the day of the week
activityDTNew$dayOfWeek <-as.POSIXlt(as.Date(activityDTNew$date))$wday
## creating a new field to store weekday/weekend flag
## initially set everything to weekday
activityDTNew$weekday <- "Weekday"
## overwrite the rows which is weekend with "weekend"
activityDTNew$weekday[activityDTNew$dayOfWeek == 0 | activityDTNew$dayOfWeek== 6] <- "Weekend"
## grouping weekday data by intervals
activityDTNewSummary <- ddply(activityDTNew, c("interval","weekday"), summarize,
Avg5Mins=sum(steps)/length(steps))
## This is to handle the gaps as we move from 55 minutes to the hour every hour.
## other wise it will be treated as integer with gap of 45 instead of 5.
activityDTNewSummary$NewInterval <- strptime(sprintf("%04d",
as.numeric(activityDTNewSummary$interval)),
format="%H%M")
x1 <- activityDTNewSummary
str(x1)
x1$NewInterval <- format(x1$NewInterval, "%Y-%m-%d %H:%M:%S")
shiny::runApp()
shiny::runApp()
setwd("D:/Coursera/RWorkingDir/DevelopingDataProducts/CourseProject")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('D:/Coursera/RWorkingDir/DevelopingDataProducts/CourseProject-A')
shiny::runApp()
